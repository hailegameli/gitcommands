
mkdir test

cd test

ls -a

git init

ls -a

cd .git

ls -a

ls -a
.		HEAD		description	info		refs
..		config		hooks		objects

cd ..

vi testfile
  add data

ls

git ls-files

git add testfile

git ls-files

git commit -m "added file 1st commit"

git status - explain

git diff   - explain

git log

git log 

git log --oneline



____
############################### .git files and explanation#############
ls -a
.		HEAD		description	info		refs
..		config		hooks		objects


sub-directories:

hooks/ : example scripts
info/ : exclude file for ignored patterns
objects/ : all "objects" - commit references
refs/ : pointers to commit objects - heads and tags

4 files:

HEAD : current branch
config : configuration options
description
index : staging area
  

HEAD ->The HEAD is quickly explained. It’s a reference to the active branch. So git knows which branch is currently in use

cat HEAD
ref: refs/heads/master

config->stores the configuration of your repository
cat config 
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true

Description -> you can create a short description of your repository. But it’s pretty irrelevant if you’re not usin
 cat description 
Unnamed repository; edit this file 'description' to name the repository

index -> staging area information --(cat index 
DIRCeRi:6ȘWeRi:5?????????5?nq']!?[??5c?,file1TREE1 0
??|S??ԥ?????~?H<,M?serve)

info->stores the configuration of your repository exclude (.gitignore)

Hooks-> some predefined git functions that are executed on certain events

pwd
/Users/saipavan/test/.git/hooks

create a pre-commit
________
cat pre-commit
#!/bin/sh

echo "You are about to commit" $(git diff --cached --name-only --diff-filter=ACM)
echo "to" $(git branch --show-current)

while : ; do
    read -p "Hey Haile, do you really want to do this? [y/n] " RESPONSE < /dev/tty
    case "${RESPONSE}" in
        [Yy]* ) exit 0; break;;
        [Nn]* ) exit 1;;
    esac
done
_______

#chmod +x pre-commit

cd ../../

****- now make changes and commit the file so it will ask for conformation  to commit as we specifed that in hooks
____________
to display terminal about branch information
open .bash_profile and add below lines and souce it or close and open ternimal

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

export PS1="\u@\h \[\033[32m\]\w - \$(parse_git_branch)\[\033[00m\] $ "

_________
BRANCHES
________

git branch branchname

git checkout -b <branchname>

git branch <branchname> <commit id>

git checkout <branchname>

git branch -a <to list all brnaches>

git status

git branch -d <branchname>   # to delete a branch

_______
STASH
_______

This functionality is useful when you’ve made changes to a branch that you aren’t ready to commit, but you need to switch to another branch

git add 

after adding if you don't want to commit

git stash list

git stash

git stash list
stash@{0}: WIP on b1: 4e59117 2commit

git stash show -p stash@{0}  ########## to show what changes are been stashed


git stash pop stash@{0}
On branch b1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file1

no changes added to commit (use "git add" and/or "git commit -a")
Dropped stash@{0} (5ef121fe4c8d9dcf8d1bcefc1d7d6f752f530fde


git stash drop <stashnumber>  ## stash number stash@{0}####


git stash clear   ### to drop entier stash list


_________
#git remote remove origin

#git remote add origin https://github.com/saidevops8989/testrep.git

#git push origin master
________


PUSH

remote branch push

git push --set-upstream origin b9


master branch
git push -u origin
__________
git revert 
__________























